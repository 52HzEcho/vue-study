概念：Vuex是Vue配套的公共数据管理工具，她可以把一些共享的数据，保存到Vuex中，方便
整个程序中的任何组件直接获取或修改公共数据

Vue是为了保存组件之间共享数据而诞生的，如果组件之间有要共享的数据可以直接放到Vuex中

data是存放组件私有数据
props是存放父组件传递的数据
vuex是存放组件间共享的数据，相当于数据的仓库

const store = new Vuex.Store()

配置vuex的步骤
1.运行npm i vuex -S 
2. 导入vuex包
   import Vuex from 'vuex'
3.注册vuex到vue中
   Vue.use(Vuex)
4.new Vuex.Store()实例，得到一个数据存储对象
   var store = new Vuex.Store({
     state:{
       //相当于组件中的data，用来存储数据
       count:0
     },
     mutations:{
       //相当于组件的methods
     },
     gettters: {
       //相当于组件的computed filters
     }
   })

5.挂载到vm实例上
const vm = new Vue({
  el:'#app',
  render:c=>c(App),
  store
})


6.state
数据使用 {{$store.state.count}}

7.mutations
如果要操作stor中的state值，只能通过调用mutations中的方法才能操作对应的数据，
不推荐直接操作state中的数据，万一数据紊乱，不能快速定位原因，每个组件都可能有方法

 注意：子组件调用mutations中方法，只能使用this.$store.commit('方法名',参数)
  mutations的参数列表中只能支持两个参数，其中
  参数1：state状态
  参数2：通过commit提交过来的参数，多个参数，可以利用数组或者对象

8.getters
注意：这里的getters只负责对外提供数据，不负责修改数据，如果要修改state中的数据
请去找mutations
getters方法和组件中的过滤器比较类似，因为过滤器和getters都没有修改原数据，
都是把原数据做了一层包装，提供给了调用者
其次，getters也与computed比较像，只要state中的数据发生了变化，如果getters同时
引用了这个数据，那么就会立即触发getters的重新求值

  注意：子组件调用getters，只能使用this.$store.getters.''
  参数1：state状态
  例：optCount (state) {  //将想要return回去
         return '当前最新的count值是：' + state.count  
      }


  总结
1.state中的数据，不能直接修改，必须通过mutations
2.组件从store中获取数据：this.$store.state.count
3.组件想要修改store中的数据，必须使用mutations提供的方法:thhis.$store.commit('方法'，参数)
4.如果state中的数据，在对外提供的对象时需要提供一层包装，推荐使用getters：this.$store.getters.''